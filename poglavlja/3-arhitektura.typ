= Архитектура система

На Слици @fig:sistem приказана је архитектура система која се заснива на мастер-агент моделу. Мастер представља централну компоненту која управља свим процесима у систему. Он се повезује са пратећим сервисима, као што су база података (_PostgreSQL_), систем за кеширање (_Redis_), складиште артефаката (_MinIO_) и интерфејс за корисничку комуникацију. _Nginx_ делује као посредни слој који обезбеђује сигуран приступ и усмеравање захтева ка мастер серверу. Агенти се повезују са системом преко сигурне _WebSocket_ везе и извршавају задатке које мастер дефинише.

На слици @fig:master_agent приказан је механизам комуникације између мастер-а и агената. Комуникација се заснива на WebSocket протоколу који омогућава двосмерну размену података у реалном времену. За потребе рада система користе се два одвојена WebSocket канала. Први канал служи за слање команди и периодичних сигнала (_heartbeat_). Други канал користи за пренос логова и извештаја о извршавању послова.
Комуникација је подељена у два канала како би се избегло загушење и осигурао стабилан проток података. Оваква организација обезбеђује поуздану синхронизацију и непрекидан рад система.

== Мастер компонента

Мастер представља централни део система и имплементирана као _Django_ апликација. Задужен је за управљање процесима и оркестрацију послова. Он координише рад свих агената и контролише извршавање задатака које дефинишу корисници.

Кориснички интерфејс развијен је као апликација која комуницира са мастером преко _RESTful API_-ја. Сви захтеви и одговори размењују се у JSON формату. Интерфејс омогућава корисницима да управљају свим ресурсима система и прате извршавање послова у реалном времену.

Приликом креирања посла, корисник бира агента који ће га извршити. Мастер прослеђује дефинисани посао изабраном агенту. Агент преузима тај посао и извршава га. Уколико је изабрани агент тренутно заузет, мастер ставља посао у ред чекања. Послови који се већ налазе у реду имају предност у односу на нове захтеве, чиме се обезбеђује фер редослед извршавања.

#figure([#box(width: auto, image("../slike/sistem.png"));],
  caption: [ Архитектура система ]
)<fig:sistem>

#figure([#box(width: auto, image("../slike/master-agent.png"));],
  caption: [Комуникација између мастер-а и агента ]
)<fig:master_agent>


Мастер одржава централизовану евиденцију свих дефинисаних послова и њихових статуса, као и информације о агентима и њиховој доступности. Hе учествује у самом извршавању, већ управља процесом и надгледа комуникацију између корисника и агената.

Поред управљања пословима, мастер обрађује све захтеве који стижу из корисничког интерфејса. Корисници преко интерфејса могу да креирају, мењају или бришу послове, као и да управљају агентима. Мастер верификује аутентичност захтева, примењује безбедносне политике и прослеђује инструкције одговарајућим сервисима.

== Агент компонента

Агент представља извршну компоненту система задужену за обраду послова које шаље мастер. Реализован је као мала _Python_ апликација која се изграђује и пакује у _.exe_ формат. На тај начин агент се може лако преузети и покренути на било ком рачунару, без потребе за додатним подешавањима или инсталацијом зависности.

Сваки агент ради независно и може бити инсталиран на различитим машинама или унутар изолованих окружења. Оваква организација омогућава равномерну расподелу оптерећења и паралелно извршавање више послова.

Агент периодично шаље _heartbeat_ сигнале мастеру како би потврдио своју доступност. На основу тих сигнала, мастер прати активност свих агената у систему. Уколико се _heartbeat_ не прими у предвиђеном времену, агент се означава као неактиван. Његови послови се аутоматски паузирају и настављају када се веза поново успостави.

Када агент прими посао, преузима податке које је дефинисао мастер и покреће извршавање корака. Током процеса агент шаље логове и статус сваког корака, што омогућава корисницима да у реалном времену прате напредак извршавања.

Оваква архитектура рада агената обезбеђује поуздано извршавање послова, лако скалирање и једноставно одржавање целокупног система.

== База података

База података представља централно место за чување свих података у систему.
Користи се _PostgreSQL_ као релациона база података. Изабрана је због стабилности, поузданости и добре подршке за рад у вишекорисничким и дистрибуираним окружењима. Сви подаци који се односе на кориснике, агенте, послове, извршења и нотификације чувају се у овој бази, док су артефакти и већи бинарни фајлови смештени у засебном складишту (_MinIO_).

Главни ентитети у систему су:

- _User_ – представља корисника система и садржи податке о налогу, улози, слици и стању двофакторске аутентикације.

- _Agent_ – представља извршну јединицу задужену за обраду послова. Чува податке о статусу, кључевима и времену последњег _heartbeat_-а.

- _Job_ – дефинише посао који се извршава преко изабраног агента. Садржи основне информације и повезане кораке.

- _Step_ – описује појединачни корак у извршавању посла.

- _Execution_ и _ExecutionStep_ – чувају податке о историји извршавања послова и статусима сваког корака.

- _Notification_ и _UserNotification_ – користе се за слање и евидентирање нотификација унутар система.

- _Property_ и _PropertyOption_ – омогућавају конфигурацију при покретању послова, са дефинисаним типовима и подразумеваним вредностима.

- _ApiKey_, _GitHubInstallation_ и _GitHubAppInstallState_ – служе за интеграцију са спољним системима и безбедан приступ преко API интерфејса.

На Слици @fig:class_diagram приказан је поједностављени дијаграм класа који илуструје структуру и односе између главних ентитета система.

#figure([#box(width: auto, image("../slike/class-diagram.png"));],
    caption: [
      Дијаграм класа система _Test Hub Mini_
    ]
  )<fig:class_diagram>
