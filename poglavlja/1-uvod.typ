= CI/CD алати

У индустријама као што су авијација, аутомобилска индустрија и телекомуникације, квалитет и поузданост система имају велики значај. Грешке у овим областима могу бити веома скупе или критичне. Због тога стандарди захтевају јасан преглед функционалних и нефункционалних захтева и њихову потпуну покривеност тестовима. Таква пракса омогућава већу безбедност и поузданост софтвера.

Континуирана интеграција и испорука (CI/CD) су темељ савременог софтверског инжењерства. Оне омогућавају бржу и поузданију испоруку апликација. Ипак, често не постоји јасна веза између захтева система и тестних случајева. То доводи до смањене покривености и повећава ризик од пропуштања критичних сценарија. Потребни су алати који повезују управљање захтевима и тестирање. На тај начин сви подаци се налазе на једном месту и избегава се дуплирање. Комуникација између тимова је боља, а захтеви и тестови су лако повезани и прегледни.

Овај рад описује развој CI/CD алата заснованог на  мастер-агент архитектури. Алат је намењен сложеним и безбедносно осетљивим окружењима. Омогућава централизовано управљање и координацију аутоматизованих радних токова у дистрибуираном систему. Тако се постижу већа скалабилност и флексибилност. Подржани су кораци као што су клонирање складишта, пренос датотека, извршавање наредби и генерисање извештаја. Безбедност је обезбеђена двофакторском аутентикацијом (2FA) и шифрованом комуникацијом између чворова. Алат садржи аналитике за праћење перформанси и нотификације преко _Microsoft Teams_-а, _Slack_-а и саме апликације.

Циљ рада је да прикаже архитектуру, безбедносне механизме и аналитичке могућности развијеног алата. Посебна пажња посвећена је практичној примени у организацијама које захтевају високу поузданост и контролу процеса. Рад показује да савремен и интегрисан приступ аутоматизацији може унапредити развој и испоруку софтвера, чинећи их ефикаснијим, прегледнијим и лакшим за одржавање.

Развој софтвера данас захтева брзу и поуздану испоруку нових верзија. Због тога су настали бројни CI/CD алати који аутоматизују процес изградње, тестирања и постављања апликације. Њихов циљ је да открију грешке у раној фази и омогуће континуирани развој.

== _Jenkins_

_Jenkins_ је један од најраспрострањенијих CI/CD алата отвореног кода. Његова архитектура се заснива на мастер-агент моделу. У овом моделу мастер управља извршавањем послова и распоређује их на агенте. Агенти могу бити покренути локално или на удаљеним серверима.

Агенти извршавају задатке као што су компилација, тестирање и распоред (_deployment_) апликације. Оваква архитектура омогућава расподелу оптерећења и паралелно извршавање послова. Тиме се побољшавају перформансе и скалабилност система.

Комуникација између мастера и агента у _Jenkins_-у се одвија преко _Java Network Launch Protocol_ (JNLP) или SSH протокола. JNLP омогућава покретање агента као _Java Web Start_ апликације. SSH протокол се користи за удаљене агенте и омогућава сигурнију везу.

Предности _Jenkins_-а су велика флексибилност и подршка за више од хиљаду _plugin_-а. Мане су сложено одржавање, ручна конфигурација и потреба за добрим познавањем система. Безбедност зависи од спољних додатака и често захтева додатну конфигурацију.

== _GitHub Actions_

_GitHub Actions_ је део _GitHub_ платформе и нуди интегрисано CI/CD решење. У овом систему не постоји класичан  мастер-агент однос. Уместо тога, користи се концепт _Runner_-а. Они представљају извршне јединице сличне агентима. _Runner_-и самостално преузимају послове са GitHub сервера и извршавају их. Архитектура је једноставнија, али са мањом контролом над процесима.

_Runner_-и могу бити _GitHub Hosted_ или _Self-Hosted_. _GitHub Hosted_ је _cloud_ инстанца коју обезбјеђује _GitHub_. Мастер логика је имплицитно интегрисана у _GitHub_ платформу. Она управља оркестрацијом и надзором извршавања радних токова.

Радни токови се дефинишу у YAML датотекама унутар репозиторијума. Извршавање радних токова покреће се аутоматски на основу различитих догађаја. Најчешћи догађаји су _push_, _pull request_ или креирање новог издања. Сваки радни ток који се извршава на _GitHub Hosted_ окружењу покреће се у изолованом виртуелном окружењу. Оваквим приступом се повећава безбедност и стабилност извршавања.

Комуникација се одвија преко _HTTPS REST API_-ја. _Runner_-и периодично шаљу захтеве ка _GitHub_ серверу и преузимају послове за извршавање. Овај приступ омогућава сигурну комуникацију, али захтева сталну конекцију.

Предност овог приступа је једноставна конфигурација и чврста интеграција са репозиторијумом кода. Мана је ограничена контрола над инфраструктуром и мања могућност прилагођавања сложеним системима.

== _GitLab_ CI/CD

_GitLab_ CI/CD интегрише читав _DevOps_ процес у једну платформу. Његова архитектура користи  мастер-агент модел. _GitLab Server_ има улогу мастера, а _GitLab Runner_ делује као агент. Мастер управља дефинисаним радним током CI/CD процеса и шаље послове _Runner_-има.

_Runner_-и могу бити локални, удаљени или у _Docker_ и _Kubernetes_ окружењу. Они преузимају посао од мастера и извршавају задате кораке, као што су _build_, _test_ и _deploy_. Након завршетка рада, резултате враћају мастеру. Оваква архитектура омогућава истовремено извршавање више послова. Такође омогућава бољу контролу приступа и једноставније скалирање система.

Комуникација између _GitLab Server_-а и _Runner_-а одвија се преко HTTP(S) протокола. _Runner_-и активно контактирају _GitLab Server_ преко API-ја и преузимају послове. Сва комуникација је шифрована путем TLS-а, што обезбјеђује сигурност података.

GitLab CI/CD је стабилан систем, али за велике пројекте захтева снажну инфраструктуру и пажљиво подешавање.
