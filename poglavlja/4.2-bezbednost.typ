== Безбедносни механизми
Безбедност система представља један од најважнијих аспеката у дизајну и реализацији дистрибуираног CI/CD алата. Циљ је да се обезбеди поуздана аутентикација, заштита комуникације и спречи неовлашћен приступ подацима и ресурсима. Пошто систем функционише у дистрибуираном окружењу у ком више агената и корисника истовремено комуницира са централним сервером, неопходно је обезбедити висок ниво заштите на свим нивоима архитектуре.

У овом поглављу описани су кључни безбедносни механизми који су примењени у систему. Обухваћени су процес двофакторске аутентикације, контрола приступа и управљање корисничким улогама, шифровање података и сигурна комуникација, као и улога Nginx сервера као заштитног и посредничког слоја. Ови механизми заједно обезбеђују интегритет, поверљивост и поузданост рада целокупног система.

=== Двофакторска аутентикација (2FA)

Двофакторска аутентикација представља додатни слој заштите корисничког налога. На овај начин, чак и у случају компромитовања лозинке, неовлашћени приступ систему је онемогућен без физичког приступа корисниковом уређају.

У оквиру система, двофакторска аутентикација је реализована коришћењем временски заснованих једнократних лозинки (TOTP) преко апликација као што су _Google Authenticator_ и _Microsoft Authenticator_.

Приликом првог пријављивања, систем генерише јединствени тајни кључ (_mfa_secret_) за сваког корисника и на основу њега креира QR код. Корисник тај код скенира помоћу изабране аутентикационе апликације, која затим локално генерише нови безбедносни код сваких 30 секунди.

Током процеса пријављивања, након успешне валидације корисничких података, систем захтева унос текућег OTP кода ради завршне провере идентитета. Уколико је унети код исправан, приступ се одобрава и кориснику се издају JWT токени за даљу комуникацију.

На Слици @fig:2fa приказан је изглед корисничког интерфејса при активирању двофакторске аутентикације, где се приказује генерисани QR код и поље за унос једнократног кода.

#figure([#box(width: 35%, image("../slike/2fa.png"));],
  caption: [
    Активирање двофакторске аутентикације (2FA)
  ]
)<fig:2fa>

=== Контрола приступа и корисничке улоге

Систем примењује контролу приступа засновану на улогама корисника. Постоје две дефинисане улоге:
- Администратор (_Admin_) и
- Регуларни корисник (_Regular_).
Администратор има овлашћења за управљање корисницима. Може да креира нове налоге и мења постојеће. Регуларни корисник нема ова овлашћења. Ипак, може користити све остале функционалности система, као што су рад са агентима и пословима.

Контрола приступа имплементирана је у оквиру _Django REST Framework_ механизма дозвола. Сваки захтев који долази до API-ја пролази кроз проверу аутентификације и улоге.  За то се користе класе _IsAdmin_ и _IsRegular_, које одређују да ли корисник има право приступа одређеном ресурсу.

```python
class IsAdmin(BasePermission):
    def has_permission(self, request, view):
        return request.user.role == Role.ADMIN

class IsRegular(BasePermission):
    def has_permission(self, request, view):
        return request.user.role == Role.REGULAR
```

Аутентификација се спроводи помоћу JWT токена, што обезбеђује сигуран и _stateless_ приступ систему.  

=== Шифровање и сигурна комуникација
Комуникација између мастера и агената осигурана је употребом више нивоа заштите. Сви подаци се преносе преко _WebSocket_ везе која је заштићена SSL/TLS протоколом, чиме се спречава пресретање и измена података током преноса.

При иницијалном повезивању, сваки агент генерише пар криптографских кључева, јавни и приватни. Јавни кључ се шаље мастеру, који га чува у бази у шифрованом облику. Приватни остаје локално на страни агента.

Све поруке које мастер шаље агенту користе хибридни приступ шифровању.

Прво се генерише симетрични кључ који се користи за шифровање садржаја поруке. Тај симетрични кључ се затим шифрује јавним кључем агента помоћу RSA алгоритма и шаље заједно са шифрованим подацима. Агент након пријема поруке користи свој приватни кључ за дешифровање симетричног кључа, а затим њиме дешифрује саму поруку.

На овај начин се обезбеђује интегритет, аутентичност и поверљивост сваке поруке између мастера и агента.

=== _Nginx_ као _reverse proxy_ и сигурносни слој
_Nginx_ у систему има улогу _reverse proxy_ сервера који усмерава све спољне захтеве ка одговарајућим сервисима унутар Docker окружења. Поред усмеравања, он обезбеђује и више безбедносних механизама:
 - контролу приступа,
 - заштиту комуникације и 
 - изолацију сервиса.

_Nginx_ прослеђује HTTP и _WebSocket_ захтеве ка _Django_ апликацији која ради на порту 8000, док се статички ресурси сервирају директно изнутра _Nginx_ окружења.

Захтеви ка складишту података (_MinIO_) пролазе кроз посебан механизам аутентификације који користи _auth_request_ директиву. Сваки захтев се најпре прослеђује _Django_ серверу ради валидације токена. Уколико је приступ дозвољен, пропушта ка _MinIO_ сервису. На овај начин се спречава неовлашћени приступ фајловима.

Поред HTTP и _WebSocket_ комуникације, _Nginx_ такође обрађује SSH саобраћај ка систему за верзионисање (_Gitea_) преко _stream_ модула, где делује као TCP proxy и преусмерава захтеве са порта 2222 на унутрашњи порт 22.

Пример конфигурације Nginx сервера приказан је на Слици @fig:nginx_config и илуструје начин прослеђивања захтева ка _Django_ апликацији, _MinIO_ складишту и _Gitea_ систему.


#figure([#box(width: 55%, image("../slike/nginx_config.png"));],
    caption: [
      Конфигурација _Nginx reverse proxy_ сервера
    ]
)<fig:nginx_config>
